#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import requests
import json
import pandas as pd
import io

# –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
BASE_URL = "http://localhost:8080"

def create_diverse_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    clients_data = {
        'client_code': [1, 2, 3, 4, 5, 6, 7, 8],
        'name': ['–ê–ª–∏—è', '–†–∞–º–∞–∑–∞–Ω', '–ú–∞—Ä–∏—è', '–ê–ª–µ–∫—Å–µ–π', '–ê–π–≥—É–ª—å', '–î–∞–Ω–∏—è—Ä', '–ñ–∞–Ω–∞—Ä', '–ï—Ä–ª–∞–Ω'],
        'status': ['–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–°—Ç—É–¥–µ–Ω—Ç', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç', '–°—Ç—É–¥–µ–Ω—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'],
        'age': [35, 28, 22, 45, 31, 40, 25, 33],
        'city': ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–®—ã–º–∫–µ–Ω—Ç', '–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–®—ã–º–∫–µ–Ω—Ç'],
        'avg_monthly_balance_KZT': [5000000, 1500000, 500000, 2000000, 1800000, 3000000, 300000, 1200000]
    }
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions_data = {
        'date': [
            '2024-01-15', '2024-01-20', '2024-02-10', '2024-02-15', '2024-03-05', '2024-03-20',
            '2024-01-25', '2024-02-28', '2024-03-10', '2024-01-30', '2024-02-20', '2024-03-15',
            '2024-01-10', '2024-02-05', '2024-03-01', '2024-01-18', '2024-02-12', '2024-03-08',
            '2024-01-22', '2024-02-25', '2024-03-12', '2024-01-28', '2024-02-18', '2024-03-18'
        ],
        'category': [
            # –ö–ª–∏–µ–Ω—Ç 1 (–ê–ª–∏—è) - –º–Ω–æ–≥–æ —Ç—Ä–∞—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö
            '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–û—Ç–µ–ª–∏', '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–¢–∞–∫—Å–∏', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            # –ö–ª–∏–µ–Ω—Ç 2 (–†–∞–º–∞–∑–∞–Ω) - –º–Ω–æ–≥–æ —Ç–∞–∫—Å–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            '–¢–∞–∫—Å–∏', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–¢–∞–∫—Å–∏', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–¢–∞–∫—Å–∏', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è',
            # –ö–ª–∏–µ–Ω—Ç 3 (–ú–∞—Ä–∏—è) - —Å—Ç—É–¥–µ–Ω—Ç, –º–∞–ª–æ —Ç—Ä–∞—Ç
            '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è', '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã',
            # –ö–ª–∏–µ–Ω—Ç 4 (–ê–ª–µ–∫—Å–µ–π) - –º–Ω–æ–≥–æ –æ–Ω–ª–∞–π–Ω —Ç—Ä–∞—Ç
            '–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', '–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', '–ï–¥–∏–º –¥–æ–º–∞', '–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', '–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', '–ï–¥–∏–º –¥–æ–º–∞'
        ],
        'amount': [
            # –ö–ª–∏–µ–Ω—Ç 1
            25000, 80000, 120000, 30000, 15000, 60000,
            # –ö–ª–∏–µ–Ω—Ç 2
            8000, 35000, 12000, 40000, 10000, 45000,
            # –ö–ª–∏–µ–Ω—Ç 3
            15000, 8000, 18000, 5000, 20000, 6000,
            # –ö–ª–∏–µ–Ω—Ç 4
            5000, 3000, 8000, 4000, 2000, 6000
        ],
        'currency': ['KZT'] * 24,
        'client_code': [
            1, 1, 1, 1, 1, 1,  # –ê–ª–∏—è
            2, 2, 2, 2, 2, 2,  # –†–∞–º–∞–∑–∞–Ω
            3, 3, 3, 3, 3, 3,  # –ú–∞—Ä–∏—è
            4, 4, 4, 4, 4, 4   # –ê–ª–µ–∫—Å–µ–π
        ],
        'product': [''] * 24
    }
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    transfers_data = {
        'date': [
            '2024-01-01', '2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01',
            '2024-01-01', '2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01',
            '2024-01-01', '2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01',
            '2024-01-01', '2024-01-15', '2024-02-01', '2024-02-15', '2024-03-01'
        ],
        'type': [
            # –ö–ª–∏–µ–Ω—Ç 1 - –≤—ã—Å–æ–∫–∏–µ –¥–æ—Ö–æ–¥—ã
            'salary_in', 'p2p_out', 'salary_in', 'p2p_out', 'salary_in',
            # –ö–ª–∏–µ–Ω—Ç 2 - —Å—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã, –º–Ω–æ–≥–æ —Å–Ω—è—Ç–∏–π
            'salary_in', 'atm_withdrawal', 'salary_in', 'atm_withdrawal', 'salary_in',
            # –ö–ª–∏–µ–Ω—Ç 3 - –Ω–∏–∑–∫–∏–µ –¥–æ—Ö–æ–¥—ã
            'stipend_in', 'p2p_out', 'stipend_in', 'p2p_out', 'stipend_in',
            # –ö–ª–∏–µ–Ω—Ç 4 - —Å—Ä–µ–¥–Ω–∏–µ –¥–æ—Ö–æ–¥—ã
            'salary_in', 'p2p_out', 'salary_in', 'p2p_out', 'salary_in'
        ],
        'direction': [
            'in', 'out', 'in', 'out', 'in',
            'in', 'out', 'in', 'out', 'in',
            'in', 'out', 'in', 'out', 'in',
            'in', 'out', 'in', 'out', 'in'
        ],
        'amount': [
            # –ö–ª–∏–µ–Ω—Ç 1
            800000, 100000, 800000, 150000, 800000,
            # –ö–ª–∏–µ–Ω—Ç 2
            400000, 50000, 400000, 60000, 400000,
            # –ö–ª–∏–µ–Ω—Ç 3
            100000, 20000, 100000, 25000, 100000,
            # –ö–ª–∏–µ–Ω—Ç 4
            500000, 80000, 500000, 90000, 500000
        ],
        'currency': ['KZT'] * 20,
        'client_code': [
            1, 1, 1, 1, 1,  # –ê–ª–∏—è
            2, 2, 2, 2, 2,  # –†–∞–º–∞–∑–∞–Ω
            3, 3, 3, 3, 3,  # –ú–∞—Ä–∏—è
            4, 4, 4, 4, 4   # –ê–ª–µ–∫—Å–µ–π
        ]
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ CSV —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏
    clients_csv = pd.DataFrame(clients_data).to_csv(index=False)
    transactions_csv = pd.DataFrame(transactions_data).to_csv(index=False)
    transfers_csv = pd.DataFrame(transfers_data).to_csv(index=False)
    
    return clients_csv, transactions_csv, transfers_csv

def upload_data(clients_csv, transactions_csv, transfers_csv):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    print("   –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    response = requests.post(
        f"{BASE_URL}/upload/clients",
        files={'file': ('clients.csv', io.StringIO(clients_csv), 'text/csv')}
    )
    if response.status_code == 200:
        print("   ‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {response.text}")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    print("   –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    response = requests.post(
        f"{BASE_URL}/upload/transactions",
        files={'file': ('transactions.csv', io.StringIO(transactions_csv), 'text/csv')}
    )
    if response.status_code == 200:
        print("   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {response.text}")
        return False
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    print("   –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...")
    response = requests.post(
        f"{BASE_URL}/upload/transfers",
        files={'file': ('transfers.csv', io.StringIO(transfers_csv), 'text/csv')}
    )
    if response.status_code == 200:
        print("   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {response.text}")
        return False
    
    return True

def process_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        response = requests.post(f"{BASE_URL}/process")
        if response.status_code == 200:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
            result = response.json()
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result['clients_count']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

def get_recommendations():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\nüéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...")
    try:
        for client_code in [1, 2, 3, 4]:
            response = requests.get(f"{BASE_URL}/recommendations/{client_code}")
            if response.status_code == 200:
                result = response.json()
                print(f"   –ö–ª–∏–µ–Ω—Ç {client_code} ({result['client_name']}):")
                for rec in result['recommendations']:
                    print(f"     - {rec['product']}: {rec['benefit_kzt_per_month']:,.0f} ‚Ç∏/–º–µ—Å")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def generate_push_notifications():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüì± –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    try:
        response = requests.post(f"{BASE_URL}/push-notifications")
        if response.status_code == 200:
            print("‚úÖ –ü—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            result = response.json()
            print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(result['notifications'])} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for i, notification in enumerate(result['notifications']):
                print(f"\n   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {i+1}:")
                print(f"     –ö–ª–∏–µ–Ω—Ç: {notification['client_code']}")
                print(f"     –ü—Ä–æ–¥—É–∫—Ç: {notification['product']}")
                print(f"     –¢–µ–∫—Å—Ç: {notification['push_notification']}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def export_csv():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("\nüìÑ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    try:
        response = requests.get(f"{BASE_URL}/export/csv")
        if response.status_code == 200:
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            result = response.json()
            print(f"   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result['sample'])}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV —Ñ–∞–π–ª
            with open('diverse_results.csv', 'w', encoding='utf-8') as f:
                f.write(result['csv_content'])
            print("   üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'diverse_results.csv'")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    try:
        response = requests.get(f"{BASE_URL}/stats")
        if response.status_code == 200:
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
            result = response.json()
            print(f"   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {result['total_clients']}")
            print(f"   –° —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: {result['clients_with_recommendations']}")
            print("   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:")
            for product, count in result['product_distribution'].items():
                print(f"     - {product}: {count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    clients_csv, transactions_csv, transfers_csv = create_diverse_test_data()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not upload_data(clients_csv, transactions_csv, transfers_csv):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if not process_data():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    get_recommendations()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—à-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    generate_push_notifications()
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    export_csv()
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    get_stats()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
